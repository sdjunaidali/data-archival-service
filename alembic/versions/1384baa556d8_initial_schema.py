"""initial schema

Revision ID: 1384baa556d8
Revises: 
Create Date: 2025-09-09 13:59:36.526306

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '1384baa556d8'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    pass
    # ### commands auto generated by Alembic - please adjust! ###
    #op.drop_table('archived_data')
    #op.drop_table('teachers')
    #op.drop_table('student')
    #op.drop_index(op.f('ix_users_username'), table_name='users')
    #op.drop_table('users')
    #op.drop_table('archival_config')
    #op.drop_table('user_table_permissions')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_table_permissions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('table_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_table_permissions_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('user_table_permissions_pkey'))
    )
    op.create_table('archival_config',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('table_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('archive_after_days', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('delete_after_days', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('custom_criteria', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('archival_config_pkey')),
    sa.UniqueConstraint('table_name', name=op.f('archival_config_table_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('users_pkey'))
    )
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('student',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('student_pkey')),
    sa.UniqueConstraint('email', name=op.f('student_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('teachers',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('teachers_pkey')),
    sa.UniqueConstraint('email', name=op.f('teachers_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('archived_data',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('table_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('data', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('archived_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('archived_data_pkey'))
    )
    # ### end Alembic commands ###
